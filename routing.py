# -*- coding: utf-8 -*-
"""
Created on Mon Apr 21 18:19:24 2025

@author: alann
"""

import openrouteservice
import pandas as pd

#import random

import streamlit as st
import leafmap.foliumap as leafmap
import geopandas 
import folium

from pulp import value
from model import build_model

from dotenv import load_dotenv
import os



#%%

# Load ORS API key
load_dotenv() 
api_key = os.getenv('api_key')
# Initialize ORS client
client = openrouteservice.Client(key=api_key)



#%%

# =============================================================================
#                            INPUT PARAMETERS
# =============================================================================
# Units of each product available at each depot
depot_product_availabilities = {'D1':{'P1':3, 'P2': 5, 'P3': 3, 'P4':0},
                                'D2':{'P1':2, 'P2': 4, 'P3': 0, 'P4':4}}

# The volume (cubic feet) required per unit of each product
product_volumes = {'P1':12, 'P2':8, 'P3':9, 'P4':16}

# Truck data (capacity is cubic feet available).
trucks = {'T1':{'base':'D1', 'capacity':50, 'cost_per_mile':0.47}, 
          'T2':{'base':'D1', 'capacity':40, 'cost_per_mile':0.41}, 
          'T3':{'base':'D2', 'capacity':30, 'cost_per_mile':0.35},
          'T4':{'base':'D2', 'capacity':90, 'cost_per_mile':0.55}}

# Number of units of each product ordered by each customer.
customer_orders = {'C1':{'P1':0, 'P2':1, 'P3':1, 'P4':0},
                   'C2':{'P1':0, 'P2':0, 'P3':0, 'P4':1},
                   'C3':{'P1':1, 'P2':0, 'P3':0, 'P4':0},
                   'C4':{'P1':0, 'P2':0, 'P3':0, 'P4':2},
                   'C5':{'P1':2, 'P2':0, 'P3':0, 'P4':0},
                   'C6':{'P1':0, 'P2':2, 'P3':1, 'P4':0},
                   'C7':{'P1':0, 'P2':1, 'P3':1, 'P4':0},
                   'C8':{'P1':1, 'P2':1, 'P3':0, 'P4':0}}

# Labels for trucks, depots, customers, and products.
truck_labels = sorted(trucks.keys())
depot_labels = sorted(depot_product_availabilities.keys())
customer_labels = sorted(customer_orders.keys())
product_labels = sorted(product_volumes.keys())

# These is the scenario node (i.e., locations of depots and customers) data, initially generated by the Veroviz sketch tool. 
# The leafletIconType was then manually set to 'home' for depot nodes and 'star' for customer nodes.
#%%---------Data Preprocessing------------------
nodesArray = [ 
    {'id': 0, 'lat': 38.3064174, 'lon': -77.5188606, 'altMeters': 0.0, 'nodeName': 'D1', 'nodeType': 'Depot', 'popupText': 'D1', 'leafletIconPrefix': 'glyphicon', 'leafletIconType': 'home', 'leafletColor': 'blue', 'leafletIconText': '0', 'cesiumIconType': 'pin', 'cesiumColor': 'blue', 'cesiumIconText': '0', 'elevMeters': None},
    {'id': 1, 'lat': 38.1876887, 'lon': -77.619984, 'altMeters': 0.0, 'nodeName': 'D2', 'nodeType': 'Depot', 'popupText': 'D2', 'leafletIconPrefix': 'glyphicon', 'leafletIconType': 'home', 'leafletColor': 'blue', 'leafletIconText': '1', 'cesiumIconType': 'pin', 'cesiumColor': 'blue', 'cesiumIconText': '1', 'elevMeters': None},
    {'id': 2, 'lat': 38.2510008, 'lon': -77.5844244, 'altMeters': 0.0, 'nodeName': 'C1', 'nodeType': 'Customer', 'popupText': 'C1', 'leafletIconPrefix': 'glyphicon', 'leafletIconType': 'star', 'leafletColor': 'orange', 'leafletIconText': '2', 'cesiumIconType': 'pin', 'cesiumColor': 'orange', 'cesiumIconText': '2', 'elevMeters': None},
    {'id': 3, 'lat': 38.3494599, 'lon': -77.6573983, 'altMeters': 0.0, 'nodeName': 'C2', 'nodeType': 'Customer', 'popupText': 'C2', 'leafletIconPrefix': 'glyphicon', 'leafletIconType': 'star', 'leafletColor': 'orange', 'leafletIconText': '3', 'cesiumIconType': 'pin', 'cesiumColor': 'orange', 'cesiumIconText': '3', 'elevMeters': None},
    {'id': 4, 'lat': 38.3706877, 'lon': -77.5007117, 'altMeters': 0.0, 'nodeName': 'C3', 'nodeType': 'Customer', 'popupText': 'C3', 'leafletIconPrefix': 'glyphicon', 'leafletIconType': 'star', 'leafletColor': 'orange', 'leafletIconText': '4', 'cesiumIconType': 'pin', 'cesiumColor': 'orange', 'cesiumIconText': '4', 'elevMeters': None},
    {'id': 5, 'lat': 38.3199284, 'lon': -77.4104575, 'altMeters': 0.0, 'nodeName': 'C4', 'nodeType': 'Customer', 'popupText': 'C4', 'leafletIconPrefix': 'glyphicon', 'leafletIconType': 'star', 'leafletColor': 'orange', 'leafletIconText': '5', 'cesiumIconType': 'pin', 'cesiumColor': 'orange', 'cesiumIconText': '5', 'elevMeters': None},
    {'id': 6, 'lat': 38.1691186, 'lon': -77.8724912, 'altMeters': 0.0, 'nodeName': 'C5', 'nodeType': 'Customer', 'popupText': 'C5', 'leafletIconPrefix': 'glyphicon', 'leafletIconType': 'star', 'leafletColor': 'orange', 'leafletIconText': '6', 'cesiumIconType': 'pin', 'cesiumColor': 'orange', 'cesiumIconText': '6', 'elevMeters': None},
    {'id': 7, 'lat': 38.5123587, 'lon': -78.0333479, 'altMeters': 0.0, 'nodeName': 'C6', 'nodeType': 'Customer', 'popupText': 'C6', 'leafletIconPrefix': 'glyphicon', 'leafletIconType': 'star', 'leafletColor': 'orange', 'leafletIconText': '7', 'cesiumIconType': 'pin', 'cesiumColor': 'orange', 'cesiumIconText': '7', 'elevMeters': None},
    {'id': 8, 'lat': 38.4804832, 'lon': -77.4413181, 'altMeters': 0.0, 'nodeName': 'C7', 'nodeType': 'Customer', 'popupText': 'C7', 'leafletIconPrefix': 'glyphicon', 'leafletIconType': 'star', 'leafletColor': 'orange', 'leafletIconText': '8', 'cesiumIconType': 'pin', 'cesiumColor': 'orange', 'cesiumIconText': '8', 'elevMeters': None},
    {'id': 9, 'lat': 38.5125157, 'lon': -77.7038413, 'altMeters': 0.0, 'nodeName': 'C8', 'nodeType': 'Customer', 'popupText': 'C8', 'leafletIconPrefix': 'glyphicon', 'leafletIconType': 'star', 'leafletColor': 'orange', 'leafletIconText': '9', 'cesiumIconType': 'pin', 'cesiumColor': 'orange', 'cesiumIconText': '9', 'elevMeters': None},
]



nodes_df = pd.DataFrame(nodesArray)

#nodes_df.info()
#nodes_df[:6]

# First 6 rows, First 6 columns resp
#nodes_df.iloc[:6, :6]

#%%



# Map each depot to its associated trucks
depot_trucks_map = {}
for truck, data in trucks.items():
    base = data['base']
    depot_trucks_map.setdefault(base, []).append(truck)

# Create the depot dataframe
depot_rows = []
for depot, products in depot_product_availabilities.items():
    lat_lon = next((n for n in nodesArray if n['nodeName'] == depot), {})
    associated_trucks = depot_trucks_map.get(depot, [])

    for product, qty in products.items():
        depot_rows.append({
            "Depot": depot,
            "Product": product,
            "QuantityAvailable": qty,
            "ProductVolume": product_volumes.get(product, 0),
            "Latitude": lat_lon.get("lat"),
            "Longitude": lat_lon.get("lon"),
            "Trucks": ", ".join(associated_trucks)
        })
        
        
customer_rows = []
for customer, orders in customer_orders.items():
    lat_lon = next((n for n in nodesArray if n['nodeName'] == customer), {})
    for product, qty in orders.items():
        customer_rows.append({
            "Customer": customer,
            "Product": product,
            "QuantityOrdered": qty,
            "Latitude": lat_lon.get("lat"),
            "Longitude": lat_lon.get("lon")
        })

df_customers = pd.DataFrame(customer_rows)
df_depots = pd.DataFrame(depot_rows)




#%%
BIG_M = 9999.9

# Extract coordinates in (lon, lat) format
coords = [(row['lon'], row['lat']) for _, row in nodes_df.iterrows()]

# Call the ORS matrix API
matrix = client.distance_matrix(
    locations=coords,
    profile='driving-car',
    metrics=['distance'],  # You can also use 'distance' or both
    resolve_locations=True,
    sources=list(range(len(coords))),
    destinations=list(range(len(coords))),
)


#%%


# Extract durations into numpy array
dist = matrix['distances']

# 2D array in seconds 
dist = {
    (nodesArray[i]['nodeName'], nodesArray[j]['nodeName']): dist[i][j] if i != j else BIG_M
    for i in range(len(nodesArray))
    for j in range(len(nodesArray))
}


#%%

# =============================================================================
#                           Solve the Model 
# =============================================================================

# Construct the model 
     
model = build_model(truck_labels,  
                    depot_labels, 
                    customer_labels, 
                    product_labels,
                    depot_product_availabilities, 
                    product_volumes, 
                    {t:trucks[t]['capacity'] for t in trucks.keys()},
                    customer_orders, 
                    {t:trucks[t]['cost_per_mile'] for t in trucks.keys()}, 
                    dist, 
                    {t:trucks[t]['base'] for t in trucks.keys()},
                    BIG_M)

# Solve the model using the CBC solver that comes with PuLP

model.solve()

#%%
#------------- Extracting and Viewing the Truck Itineraries

# Populate truck path and customer order dicts by extracting variable values
# from the solved model.
path, order = {}, {}  
for v in model.variables():
    var, truck, i, j, val = v.name.split('_') + [v.varValue]
    if var == 'x' and val == 1:
        if not(truck in path):
            path[truck] = {}
        path[truck][i] = j
        if i.startswith('D'):
            path[truck]['depot'] = i
    elif var == 'u' and val > 0:
        if not(truck in order):
            order[truck] = {}
        if not(i in order[truck]):
            order[truck][i] = []
        order[truck][i].append((j, val))


# Utility function - given a truck label, build its route as a list (excluding the depot).
def build_truck_route(truck):
    h = path[truck]
    depot = h['depot']
    curr_loc = depot
    route = []
    while h[curr_loc] != depot:
        route.append(h[curr_loc])
        curr_loc = h[curr_loc]
    return route



# Build a dict for all truck routes including the depots. We will use this later.
truck_routes = {}
    
# Build Itinerary Table
itinerary_list = []
for t in truck_labels:
    if t in path :
        depot = path[t]['depot']
        route = build_truck_route(t)
        truck_routes[t] = [depot] + route + [depot]
        stop_num = 1
        
        for stop in route:
            delivery = str(order[t][stop]).replace('[', '').replace(']', '').replace("'", '')
            itinerary_list.append({
                'Truck':t, 
                'Stop Number':str(stop_num), 
                'Customer':stop, 
                'Delivery (Product, Quantity)':delivery
            })
            
            stop_num += 1  

# Create a data frame to hold the truck iteneraries and show it
itinerary_df = pd.DataFrame(itinerary_list)

#%%


#%%

# Build mapping from nodeName to coordinates
coords_map = {node['nodeName']: (node['lat'], node['lon']) for node in nodesArray}

# your truck color map  
truck_colors = {'T1':'blue','T2':'red','T3':'black','T4':'green'}


# Add a color column based on truck
itinerary_df["Color"] = itinerary_df["Truck"].map(truck_colors)
#%%
# # Step 2: Select 5 random nodes
# all_nodes = list(coords_map.keys())
# sample_route = random.sample(all_nodes, 5)



# # Step 3: Simple nearest-neighbor route logic
# visited = [sample_route[0]]
# unvisited = sample_route[1:]

# while unvisited:
#     last = visited[-1]
#     next_node = min(unvisited, key=lambda x: dist.get((last, x), BIG_M))
#     visited.append(next_node)
#     unvisited.remove(next_node)
    
    


# # Step 4: Build route DataFrame
# route_coords = [coords_map[node] for node in visited]
# route_df = pd.DataFrame(route_coords, columns=['lat', 'lon'])
# route_df['node'] = visited


#%%
# =============================================================================
#                                       MAIN APP
# =============================================================================



st.set_page_config(layout="wide")

#-------------Sidebar--------------




st.sidebar.title("About")


markdown = ("""
The objective is to simultaneously determine:

- the products to be shipped from each depot to each customer,  
- how to assign trucks to customers, and  
- how to route each truck to its customers,all in a way that achieves the lowest total delivery cost possible.
""")

st.sidebar.info(markdown)


view_option = st.sidebar.radio("View Options", ["Customer and Orders Locations", "Create Route"])



logo = "https://i.imgur.com/UbOXYAU.png"
st.sidebar.image(logo)



#%%


#-----------------------------Main Page------------------##


# Find the first depot's coordinates
depot_coords = next(
    (node['lat'], node['lon']) for node in nodesArray if node['nodeType'] == 'Depot'
)

# Center the map using the first depot
m = leafmap.Map(center=depot_coords, zoom=10)

# Visualize on Leafmap


if view_option == "Customer and Orders Locations":
    st.title("🚂⛽🚚Distribution Overview")

    for node in nodesArray:
        lat, lon = node['lat'], node['lon']
        node_name = node['nodeName']
        node_type = node['nodeType']
        
        if node_type == 'Depot':
            availability = depot_product_availabilities.get(node_name, {})
            popup_html = f"""
            <div style='width: 100px;'>
              <b>{node_name}</b><br>
              {"<br>".join([f"{prod}: {qty}" for prod, qty in availability.items()])}
            </div>
            """
            icon = folium.Icon(color='green', icon='home')  # depot marker
        else:
            orders = customer_orders.get(node_name, {})
            popup_html = f"""
            <div style='width: 100px;'>
              <b>{node_name}</b><br>
              {"<br>".join([f"{prod}: {qty}" for prod, qty in orders.items()])}
            </div>
            """
            icon = folium.Icon(color='red', icon='shopping-cart')  # customer marker

        # Create folium marker
        marker = folium.Marker(
            location=(lat, lon),
            popup=folium.Popup(popup_html, max_width=150),
            icon=icon
        )
        m.add_layer(marker)
    
    m.to_streamlit(height=700)
    
    st.subheader("Data Summary")
    cols = st.columns(2)
    with cols[0]:
        with st.container(border=True, height=300):
            st.write("Customer Data")
            st.dataframe(df_customers)
    with cols[1]:
        with st.container(border=True, height=300):
            st.write("Depot Data")
            st.dataframe(df_depots)

#%%
else:  # view_option == "Create Route"

    st.title("🚚 Supply Network Overview")

    if not truck_routes:
        st.warning("No routes to display.")
    else:
        col = st.columns(1)
        
        # show cost
        total_cost = value(model.objective)
        with col[0]:
            with st.container(border=True): 
                st.write(f"Total Cost of Transportation = €{total_cost:,.2f}")
        
        # center map on first depot
        m = leafmap.Map(center=(nodesArray[0]['lat'], nodesArray[0]['lon']), zoom=10)

                

        # for each truck, draw its route
        for t, stops in truck_routes.items():
            
            # 1) add markers for this truck’s stops
            for idx, node in enumerate(stops):
                lat, lon = coords_map[node]
                
                if idx == 0:
                    icon = folium.Icon(color="green", icon="play")
                    popup = f"""
                    <div style='width: 100px;'>
                      <b>{t}</b><br>
                      Start: {node}
                    </div>
                    """
                elif idx == len(stops)-1:
                    icon = folium.Icon(color="red", icon="stop")
                    popup = f"""
                    <div style='width: 100px;'>
                      <b>{t}</b><br>
                      End: {node}
                    </div>
                    """
                else:
                    icon = folium.Icon(color="blue", icon="circle")
                    popup = f"""
                    <div style='width: 100px;'>
                      <b>{t}</b><br>
                      Stop {idx}<br>
                      Customer {node}
                    </div>
                    """

                m.add_marker(
                    location=(lat, lon),
                    popup=popup,
                    icon=icon
                )

            # 2) build GeoJSON LineString for this truck
            geojson_coords = [[coords_map[n][1], coords_map[n][0]] for n in stops]
            route_geojson = {
                "type":"FeatureCollection",
                "features":[
                    {"type":"Feature",
                     "properties":{"popup":f"Route {t}"},
                     "geometry":{"type":"LineString","coordinates":geojson_coords}
                    }
                ]
            }
    
            style = {
                "color":truck_colors.get(t,"black"), 
                "weight":4, 
                "opacity":0.8
            }
    
    
            m.add_geojson(
                route_geojson,
                layer_name=f"Route — {t}",
                style=style,
                popup_property="popup"
            )
    
        m.to_streamlit(height=700)
        
        
        st.subheader("Itinerary")
        st.dataframe(itinerary_df)


#%%


# else:  # view_option == "Create Route"

#     st.title("🚚 Supply Network Overview")

#     if route_df.empty:
#         st.warning("No route to display.")
#     else:
#         col = st.columns(1)

#         total_cost = value(model.objective)
#         with col[0]:
#             with st.container(border=True): 
#                 st.write(f"Total Cost of Transportation = €{total_cost:,.2f}")

#         # Add start, stop, and intermediate markers
#         for i, row in route_df.iterrows():
#             node = row['node']
#             lat, lon = row['lat'], row['lon']

#             if i == 0:
#                 popup_text = f"Start ({node})"
#                 icon = folium.Icon(color='green', icon='play')  # Start marker
#             elif i == len(route_df) - 1:
#                 popup_text = f"Stop ({node})"
#                 icon = folium.Icon(color='red', icon='stop')   # End marker
#             else:
#                 popup_text = f"Waypoint ({node})"
#                 icon = folium.Icon(color='blue', icon='circle')  # Intermediate

#             marker = folium.Marker(
#                 location=(lat, lon),
#                 popup=popup_text,
#                 icon=icon
#             )
#             m.add_layer(marker)

#         # --- Draw route as GeoJSON ---
#         geojson_coords = [[lon, lat] for lat, lon in route_coords]  # lon-lat order

#         route_geojson = {
#             "type": "FeatureCollection",
#             "features": [
#                 {
#                     "type": "Feature",
#                     "properties": {"popup": "Optimized Route"},
#                     "geometry": {
#                         "type": "LineString",
#                         "coordinates": geojson_coords
#                     }
#                 }
#             ]
#         }

#         style = {
#             "color": "blue",
#             "weight": 4,
#             "opacity": 0.8
#         }

#         m.add_geojson(
#             route_geojson,
#             layer_name="Driving Route",
#             style=style,
#             popup_property="popup"
#         )
    
#     m.to_streamlit(height=700)
    
#     with col[0]:
#         with st.container(border=True): 
#             st.write("Itinerary")

#     st.write(itinerary_df)

#%%








